package studies.wsi.tictactoe
package game

import scala.collection.{immutable, mutable}
import scala.util.Random


class Game(var player: Player, val board: Board) {
  def makeMove(move: (Int, Int)): Unit = {
    board.setTile(move(0), move(1), player)
    swapPlayer()
  }

  private def swapPlayer(): Unit = {
    player = PlayerUtils.opposite(player)
  }

  def removeMove(move: (Int, Int)): Unit = {
    swapPlayer()
    board.setTile(move(0), move(1), Player.NONE)
  }
  
  def get(row: Int, col: Int): Player = board.get(row, col)
  def get(row_col: (Int, Int)): Player = board.get(row_col(0), row_col(1))

  def children(): IndexedSeq[(Int, Int)] = {
    for {
      row <- Random.shuffle(0 until 5)
      col <- Random.shuffle(0 until 5)
      if get(row, col) == Player.NONE
    } yield {
      (row, col)
    }
  }


  def isTerminalBest(move: (Int, Int)): Player = {
    if move == (-1, -1) then
      Player.NONE
    else
      isTerminalFromLastMove(move)
  }

  private def isTerminalFromLastMove(move: (Int, Int)): Player = {
    var ret = Player.NONE
    for {
      state <- Game.loseStatesPerMove(move)
      possible = get(state.head)
      if possible != Player.NONE
    } do {
      if (state.tail.map(tile => get(tile)).count(player => {
        player == possible
      }) == 2) {
        ret = PlayerUtils.opposite(possible)
      }
    }
    if (ret != Player.NONE){
      for {
        state <- Game.winStatesPerMove(move)
        possible = get(state.head)
        if possible != Player.NONE
      } do {
        if (state.tail.map(tile => get(tile)).count(player => {
          player == possible
        }) == 3) {
          ret = possible
        }
      }
    }
    ret
  }

  
}

object Game {
   private val winStatesPerMove: immutable.HashMap[(Int, Int), Seq[Seq[(Int, Int)]]] = immutable.HashMap(
     (0, 0) -> Seq(Seq((0, 0), (0, 1), (0, 2), (0, 3)), Seq((0, 0), (1, 0), (2, 0), (3, 0)), Seq((0, 0), (1, 1), (2, 2), (3, 3))),
     (0, 1) -> Seq(Seq((0, 0), (0, 1), (0, 2), (0, 3)), Seq((0, 1), (0, 2), (0, 3), (0, 4)), Seq((0, 1), (1, 1), (2, 1), (3, 1)), Seq((0, 1), (1, 2), (2, 3), (3, 4))),
     (0, 2) -> Seq(Seq((0, 0), (0, 1), (0, 2), (0, 3)), Seq((0, 1), (0, 2), (0, 3), (0, 4)), Seq((0, 2), (1, 2), (2, 2), (3, 2))),
     (0, 3) -> Seq(Seq((0, 0), (0, 1), (0, 2), (0, 3)), Seq((0, 1), (0, 2), (0, 3), (0, 4)), Seq((0, 3), (1, 3), (2, 3), (3, 3)), Seq((0, 3), (1, 2), (2, 1), (3, 0))),
     (0, 4) -> Seq(Seq((0, 1), (0, 2), (0, 3), (0, 4)), Seq((0, 4), (1, 4), (2, 4), (3, 4)), Seq((0, 4), (1, 3), (2, 2), (3, 1))),
     (1, 0) -> Seq(Seq((1, 0), (1, 1), (1, 2), (1, 3)), Seq((0, 0), (1, 0), (2, 0), (3, 0)), Seq((1, 0), (2, 0), (3, 0), (4, 0)), Seq((1, 0), (2, 1), (3, 2), (4, 3))),
     (1, 1) -> Seq(Seq((1, 0), (1, 1), (1, 2), (1, 3)), Seq((1, 1), (1, 2), (1, 3), (1, 4)), Seq((0, 1), (1, 1), (2, 1), (3, 1)), Seq((1, 1), (2, 1), (3, 1), (4, 1)), Seq((0, 0), (1, 1), (2, 2), (3, 3)), Seq((1, 1), (2, 2), (3, 3), (4, 4))),
     (1, 2) -> Seq(Seq((1, 0), (1, 1), (1, 2), (1, 3)), Seq((1, 1), (1, 2), (1, 3), (1, 4)), Seq((0, 2), (1, 2), (2, 2), (3, 2)), Seq((1, 2), (2, 2), (3, 2), (4, 2)), Seq((0, 1), (1, 2), (2, 3), (3, 4)), Seq((0, 3), (1, 2), (2, 1), (3, 0))),
     (1, 3) -> Seq(Seq((1, 0), (1, 1), (1, 2), (1, 3)), Seq((1, 1), (1, 2), (1, 3), (1, 4)), Seq((0, 3), (1, 3), (2, 3), (3, 3)), Seq((1, 3), (2, 3), (3, 3), (4, 3)), Seq((0, 4), (1, 3), (2, 2), (3, 1)), Seq((1, 3), (2, 2), (3, 1), (4, 0))),
     (1, 4) -> Seq(Seq((1, 1), (1, 2), (1, 3), (1, 4)), Seq((0, 4), (1, 4), (2, 4), (3, 4)), Seq((1, 4), (2, 4), (3, 4), (4, 4)), Seq((1, 4), (2, 3), (3, 2), (4, 1))),
     (2, 0) -> Seq(Seq((2, 0), (2, 1), (2, 2), (2, 3)), Seq((0, 0), (1, 0), (2, 0), (3, 0)), Seq((1, 0), (2, 0), (3, 0), (4, 0))),
     (2, 1) -> Seq(Seq((2, 0), (2, 1), (2, 2), (2, 3)), Seq((2, 1), (2, 2), (2, 3), (2, 4)), Seq((0, 1), (1, 1), (2, 1), (3, 1)), Seq((1, 1), (2, 1), (3, 1), (4, 1)), Seq((1, 0), (2, 1), (3, 2), (4, 3)), Seq((0, 3), (1, 2), (2, 1), (3, 0))),
     (2, 2) -> Seq(Seq((2, 0), (2, 1), (2, 2), (2, 3)), Seq((2, 1), (2, 2), (2, 3), (2, 4)), Seq((0, 2), (1, 2), (2, 2), (3, 2)), Seq((1, 2), (2, 2), (3, 2), (4, 2)), Seq((0, 0), (1, 1), (2, 2), (3, 3)), Seq((1, 1), (2, 2), (3, 3), (4, 4)), Seq((0, 4), (1, 3), (2, 2), (3, 1)), Seq((1, 3), (2, 2), (3, 1), (4, 0))),
     (2, 3) -> Seq(Seq((2, 0), (2, 1), (2, 2), (2, 3)), Seq((2, 1), (2, 2), (2, 3), (2, 4)), Seq((0, 3), (1, 3), (2, 3), (3, 3)), Seq((1, 3), (2, 3), (3, 3), (4, 3)), Seq((0, 1), (1, 2), (2, 3), (3, 4)), Seq((1, 4), (2, 3), (3, 2), (4, 1))),
     (2, 4) -> Seq(Seq((2, 1), (2, 2), (2, 3), (2, 4)), Seq((0, 4), (1, 4), (2, 4), (3, 4)), Seq((1, 4), (2, 4), (3, 4), (4, 4))),
     (3, 0) -> Seq(Seq((3, 0), (3, 1), (3, 2), (3, 3)), Seq((0, 0), (1, 0), (2, 0), (3, 0)), Seq((1, 0), (2, 0), (3, 0), (4, 0)), Seq((0, 3), (1, 2), (2, 1), (3, 0))),
     (3, 1) -> Seq(Seq((3, 0), (3, 1), (3, 2), (3, 3)), Seq((3, 1), (3, 2), (3, 3), (3, 4)), Seq((0, 1), (1, 1), (2, 1), (3, 1)), Seq((1, 1), (2, 1), (3, 1), (4, 1)), Seq((0, 4), (1, 3), (2, 2), (3, 1)), Seq((1, 3), (2, 2), (3, 1), (4, 0))),
     (3, 2) -> Seq(Seq((3, 0), (3, 1), (3, 2), (3, 3)), Seq((3, 1), (3, 2), (3, 3), (3, 4)), Seq((0, 2), (1, 2), (2, 2), (3, 2)), Seq((1, 2), (2, 2), (3, 2), (4, 2)), Seq((1, 0), (2, 1), (3, 2), (4, 3)), Seq((1, 4), (2, 3), (3, 2), (4, 1))),
     (3, 3) -> Seq(Seq((3, 0), (3, 1), (3, 2), (3, 3)), Seq((3, 1), (3, 2), (3, 3), (3, 4)), Seq((0, 3), (1, 3), (2, 3), (3, 3)), Seq((1, 3), (2, 3), (3, 3), (4, 3)), Seq((0, 0), (1, 1), (2, 2), (3, 3)), Seq((1, 1), (2, 2), (3, 3), (4, 4))),
     (3, 4) -> Seq(Seq((3, 1), (3, 2), (3, 3), (3, 4)), Seq((0, 4), (1, 4), (2, 4), (3, 4)), Seq((1, 4), (2, 4), (3, 4), (4, 4)), Seq((0, 1), (1, 2), (2, 3), (3, 4))),
     (4, 0) -> Seq(Seq((4, 0), (4, 1), (4, 2), (4, 3)), Seq((1, 0), (2, 0), (3, 0), (4, 0)), Seq((1, 3), (2, 2), (3, 1), (4, 0))),
     (4, 1) -> Seq(Seq((4, 0), (4, 1), (4, 2), (4, 3)), Seq((4, 1), (4, 2), (4, 3), (4, 4)), Seq((1, 1), (2, 1), (3, 1), (4, 1)), Seq((1, 4), (2, 3), (3, 2), (4, 1))),
     (4, 2) -> Seq(Seq((4, 0), (4, 1), (4, 2), (4, 3)), Seq((4, 1), (4, 2), (4, 3), (4, 4)), Seq((1, 2), (2, 2), (3, 2), (4, 2))),
     (4, 3) -> Seq(Seq((4, 0), (4, 1), (4, 2), (4, 3)), Seq((4, 1), (4, 2), (4, 3), (4, 4)), Seq((1, 3), (2, 3), (3, 3), (4, 3)), Seq((1, 0), (2, 1), (3, 2), (4, 3))),
     (4, 4) -> Seq(Seq((4, 1), (4, 2), (4, 3), (4, 4)), Seq((1, 4), (2, 4), (3, 4), (4, 4)), Seq((1, 1), (2, 2), (3, 3), (4, 4)))
   )
    private val loseStatesPerMove: immutable.HashMap[(Int, Int), Seq[Seq[(Int, Int)]]] = immutable.HashMap(
      (0, 0) -> Seq(Seq((0, 0), (0, 1), (0, 2)), Seq((0, 0), (1, 0), (2, 0)), Seq((0, 0), (1, 1), (2, 2))),
      (0, 1) -> Seq(Seq((0, 0), (0, 1), (0, 2)), Seq((0, 1), (0, 2), (0, 3)), Seq((0, 1), (1, 1), (2, 1)), Seq((0, 1), (1, 2), (2, 3))),
      (0, 2) -> Seq(Seq((0, 0), (0, 1), (0, 2)), Seq((0, 1), (0, 2), (0, 3)), Seq((0, 2), (0, 3), (0, 4)), Seq((0, 2), (1, 2), (2, 2)), Seq((0, 2), (1, 3), (2, 4)), Seq((0, 2), (1, 1), (2, 0))),
      (0, 3) -> Seq(Seq((0, 1), (0, 2), (0, 3)), Seq((0, 2), (0, 3), (0, 4)), Seq((0, 3), (1, 3), (2, 3)), Seq((0, 3), (1, 2), (2, 1))),
      (0, 4) -> Seq(Seq((0, 2), (0, 3), (0, 4)), Seq((0, 4), (1, 4), (2, 4)), Seq((0, 4), (1, 3), (2, 2))),
      (1, 0) -> Seq(Seq((1, 0), (1, 1), (1, 2)), Seq((0, 0), (1, 0), (2, 0)), Seq((1, 0), (2, 0), (3, 0)), Seq((1, 0), (2, 1), (3, 2))),
      (1, 1) -> Seq(Seq((1, 0), (1, 1), (1, 2)), Seq((1, 1), (1, 2), (1, 3)), Seq((0, 1), (1, 1), (2, 1)), Seq((1, 1), (2, 1), (3, 1)), Seq((0, 0), (1, 1), (2, 2)), Seq((1, 1), (2, 2), (3, 3)), Seq((0, 2), (1, 1), (2, 0))),
      (1, 2) -> Seq(Seq((1, 0), (1, 1), (1, 2)), Seq((1, 1), (1, 2), (1, 3)), Seq((1, 2), (1, 3), (1, 4)), Seq((0, 2), (1, 2), (2, 2)), Seq((1, 2), (2, 2), (3, 2)), Seq((0, 1), (1, 2), (2, 3)), Seq((1, 2), (2, 3), (3, 4)), Seq((0, 3), (1, 2), (2, 1)), Seq((1, 2), (2, 1), (3, 0))),
      (1, 3) -> Seq(Seq((1, 1), (1, 2), (1, 3)), Seq((1, 2), (1, 3), (1, 4)), Seq((0, 3), (1, 3), (2, 3)), Seq((1, 3), (2, 3), (3, 3)), Seq((0, 2), (1, 3), (2, 4)), Seq((0, 4), (1, 3), (2, 2)), Seq((1, 3), (2, 2), (3, 1))),
      (1, 4) -> Seq(Seq((1, 2), (1, 3), (1, 4)), Seq((0, 4), (1, 4), (2, 4)), Seq((1, 4), (2, 4), (3, 4)), Seq((1, 4), (2, 3), (3, 2))),
      (2, 0) -> Seq(Seq((2, 0), (2, 1), (2, 2)), Seq((0, 0), (1, 0), (2, 0)), Seq((1, 0), (2, 0), (3, 0)), Seq((2, 0), (3, 0), (4, 0)), Seq((2, 0), (3, 1), (4, 2)), Seq((0, 2), (1, 1), (2, 0))),
      (2, 1) -> Seq(Seq((2, 0), (2, 1), (2, 2)), Seq((2, 1), (2, 2), (2, 3)), Seq((0, 1), (1, 1), (2, 1)), Seq((1, 1), (2, 1), (3, 1)), Seq((2, 1), (3, 1), (4, 1)), Seq((1, 0), (2, 1), (3, 2)), Seq((2, 1), (3, 2), (4, 3)), Seq((0, 3), (1, 2), (2, 1)), Seq((1, 2), (2, 1), (3, 0))),
      (2, 2) -> Seq(Seq((2, 0), (2, 1), (2, 2)), Seq((2, 1), (2, 2), (2, 3)), Seq((2, 2), (2, 3), (2, 4)), Seq((0, 2), (1, 2), (2, 2)), Seq((1, 2), (2, 2), (3, 2)), Seq((2, 2), (3, 2), (4, 2)), Seq((0, 0), (1, 1), (2, 2)), Seq((1, 1), (2, 2), (3, 3)), Seq((2, 2), (3, 3), (4, 4)), Seq((0, 4), (1, 3), (2, 2)), Seq((1, 3), (2, 2), (3, 1)), Seq((2, 2), (3, 1), (4, 0))),
      (2, 3) -> Seq(Seq((2, 1), (2, 2), (2, 3)), Seq((2, 2), (2, 3), (2, 4)), Seq((0, 3), (1, 3), (2, 3)), Seq((1, 3), (2, 3), (3, 3)), Seq((2, 3), (3, 3), (4, 3)), Seq((0, 1), (1, 2), (2, 3)), Seq((1, 2), (2, 3), (3, 4)), Seq((1, 4), (2, 3), (3, 2)), Seq((2, 3), (3, 2), (4, 1))),
      (2, 4) -> Seq(Seq((2, 2), (2, 3), (2, 4)), Seq((0, 4), (1, 4), (2, 4)), Seq((1, 4), (2, 4), (3, 4)), Seq((2, 4), (3, 4), (4, 4)), Seq((0, 2), (1, 3), (2, 4)), Seq((2, 4), (3, 3), (4, 2))),
      (3, 0) -> Seq(Seq((3, 0), (3, 1), (3, 2)), Seq((1, 0), (2, 0), (3, 0)), Seq((2, 0), (3, 0), (4, 0)), Seq((1, 2), (2, 1), (3, 0))),
      (3, 1) -> Seq(Seq((3, 0), (3, 1), (3, 2)), Seq((3, 1), (3, 2), (3, 3)), Seq((1, 1), (2, 1), (3, 1)), Seq((2, 1), (3, 1), (4, 1)), Seq((2, 0), (3, 1), (4, 2)), Seq((1, 3), (2, 2), (3, 1)), Seq((2, 2), (3, 1), (4, 0))),
      (3, 2) -> Seq(Seq((3, 0), (3, 1), (3, 2)), Seq((3, 1), (3, 2), (3, 3)), Seq((3, 2), (3, 3), (3, 4)), Seq((1, 2), (2, 2), (3, 2)), Seq((2, 2), (3, 2), (4, 2)), Seq((1, 0), (2, 1), (3, 2)), Seq((2, 1), (3, 2), (4, 3)), Seq((1, 4), (2, 3), (3, 2)), Seq((2, 3), (3, 2), (4, 1))),
      (3, 3) -> Seq(Seq((3, 1), (3, 2), (3, 3)), Seq((3, 2), (3, 3), (3, 4)), Seq((1, 3), (2, 3), (3, 3)), Seq((2, 3), (3, 3), (4, 3)), Seq((1, 1), (2, 2), (3, 3)), Seq((2, 2), (3, 3), (4, 4)), Seq((2, 4), (3, 3), (4, 2))),
      (3, 4) -> Seq(Seq((3, 2), (3, 3), (3, 4)), Seq((1, 4), (2, 4), (3, 4)), Seq((2, 4), (3, 4), (4, 4)), Seq((1, 2), (2, 3), (3, 4))),
      (4, 0) -> Seq(Seq((4, 0), (4, 1), (4, 2)), Seq((2, 0), (3, 0), (4, 0)), Seq((2, 2), (3, 1), (4, 0))),
      (4, 1) -> Seq(Seq((4, 0), (4, 1), (4, 2)), Seq((4, 1), (4, 2), (4, 3)), Seq((2, 1), (3, 1), (4, 1)), Seq((2, 3), (3, 2), (4, 1))),
      (4, 2) -> Seq(Seq((4, 0), (4, 1), (4, 2)), Seq((4, 1), (4, 2), (4, 3)), Seq((4, 2), (4, 3), (4, 4)), Seq((2, 2), (3, 2), (4, 2)), Seq((2, 0), (3, 1), (4, 2)), Seq((2, 4), (3, 3), (4, 2))),
      (4, 3) -> Seq(Seq((4, 1), (4, 2), (4, 3)), Seq((4, 2), (4, 3), (4, 4)), Seq((2, 3), (3, 3), (4, 3)), Seq((2, 1), (3, 2), (4, 3))),
      (4, 4) -> Seq(Seq((4, 2), (4, 3), (4, 4)), Seq((2, 4), (3, 4), (4, 4)), Seq((2, 2), (3, 3), (4, 4)))
    )

    val WinStates: List[List[(Int, Int)]] =
      List(
        List((0, 0), (0, 1), (0, 2), (0, 3)),
        List((1, 0), (1, 1), (1, 2), (1, 3)),
        List((2, 0), (2, 1), (2, 2), (2, 3)),
        List((3, 0), (3, 1), (3, 2), (3, 3)),
        List((4, 0), (4, 1), (4, 2), (4, 3)),
        List((0, 1), (0, 2), (0, 3), (0, 4)),
        List((1, 1), (1, 2), (1, 3), (1, 4)),
        List((2, 1), (2, 2), (2, 3), (2, 4)),
        List((3, 1), (3, 2), (3, 3), (3, 4)),
        List((4, 1), (4, 2), (4, 3), (4, 4)),
        List((0, 0), (1, 0), (2, 0), (3, 0)),
        List((0, 1), (1, 1), (2, 1), (3, 1)),
        List((0, 2), (1, 2), (2, 2), (3, 2)),
        List((0, 3), (1, 3), (2, 3), (3, 3)),
        List((0, 4), (1, 4), (2, 4), (3, 4)),
        List((1, 0), (2, 0), (3, 0), (4, 0)),
        List((1, 1), (2, 1), (3, 1), (4, 1)),
        List((1, 2), (2, 2), (3, 2), (4, 2)),
        List((1, 3), (2, 3), (3, 3), (4, 3)),
        List((1, 4), (2, 4), (3, 4), (4, 4)),
        List((0, 1), (1, 2), (2, 3), (3, 4)),
        List((0, 0), (1, 1), (2, 2), (3, 3)),
        List((1, 1), (2, 2), (3, 3), (4, 4)),
        List((1, 0), (2, 1), (3, 2), (4, 3)),
        List((0, 3), (1, 2), (2, 1), (3, 0)),
        List((0, 4), (1, 3), (2, 2), (3, 1)),
        List((1, 3), (2, 2), (3, 1), (4, 0)),
        List((1, 4), (2, 3), (3, 2), (4, 1))
      )

    val loseStates: List[List[(Int, Int)]] = List(
      List((0, 0), (0, 1), (0, 2)), List((0, 1), (0, 2), (0, 3)), List((0, 2), (0, 3), (0, 4)),
      List((1, 0), (1, 1), (1, 2)), List((1, 1), (1, 2), (1, 3)), List((1, 2), (1, 3), (1, 4)),
      List((2, 0), (2, 1), (2, 2)), List((2, 1), (2, 2), (2, 3)), List((2, 2), (2, 3), (2, 4)),
      List((3, 0), (3, 1), (3, 2)), List((3, 1), (3, 2), (3, 3)), List((3, 2), (3, 3), (3, 4)),
      List((4, 0), (4, 1), (4, 2)), List((4, 1), (4, 2), (4, 3)), List((4, 2), (4, 3), (4, 4)),
      List((0, 0), (1, 0), (2, 0)), List((1, 0), (2, 0), (3, 0)), List((2, 0), (3, 0), (4, 0)),
      List((0, 1), (1, 1), (2, 1)), List((1, 1), (2, 1), (3, 1)), List((2, 1), (3, 1), (4, 1)),
      List((0, 2), (1, 2), (2, 2)), List((1, 2), (2, 2), (3, 2)), List((2, 2), (3, 2), (4, 2)),
      List((0, 3), (1, 3), (2, 3)), List((1, 3), (2, 3), (3, 3)), List((2, 3), (3, 3), (4, 3)),
      List((0, 4), (1, 4), (2, 4)), List((1, 4), (2, 4), (3, 4)), List((2, 4), (3, 4), (4, 4)),
      List((0, 2), (1, 3), (2, 4)), List((0, 1), (1, 2), (2, 3)), List((1, 2), (2, 3), (3, 4)),
      List((0, 0), (1, 1), (2, 2)), List((1, 1), (2, 2), (3, 3)), List((2, 2), (3, 3), (4, 4)),
      List((1, 0), (2, 1), (3, 2)), List((2, 1), (3, 2), (4, 3)), List((2, 0), (3, 1), (4, 2)),
      List((0, 2), (1, 1), (2, 0)), List((0, 3), (1, 2), (2, 1)), List((1, 2), (2, 1), (3, 0)),
      List((0, 4), (1, 3), (2, 2)), List((1, 3), (2, 2), (3, 1)), List((2, 2), (3, 1), (4, 0)),
      List((1, 4), (2, 3), (3, 2)), List((2, 3), (3, 2), (4, 1)), List((2, 4), (3, 3), (4, 2))
    )

    val unwinnableLoseStates: List[List[(Int, Int)]] = List(
      List((0, 2), (1, 3), (2, 4)),
      List((2, 0), (3, 1), (4, 2)),
      List((0, 2), (1, 1), (2, 0)),
      List((2, 4), (3, 3), (4, 2))
    )

    def Empty(): Game = {
      Game(Player.X, Board(Array.fill(25)(Player.NONE)))
    }
}